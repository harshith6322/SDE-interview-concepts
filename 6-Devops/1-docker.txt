***DOCKER***


1.docker run mongo --img

2.docker ps = show all container that are running

3.docker run -d -p 27017:27017 mongo  = -p  = for port to froward from windows to docker ,-d = ditched mode does not run uneed list of commands

4.docker kill mongo  = to kill the containers

5. docker rmi imgname = to remove the image

6. docker  build = Lets you build an image.

7. docker push = Lets you push your image to a registry

8.docker logs <container_id>


***to create docker image***


FROM node:20

WORKDIR /app

COPY package*.
copy prsima.

RUN npm install
RUN npx prisma generate

COPY..

RUN npm run build

EXPOSE 3000

CMD ["node", "dist/index.js"]


1. docker build -t image_name .
2. Add a .dockerignore so that node_modules donâ€™t get copied over 

//passing  database url as env in docker
3.docker run -p 3000:3000 -e DATABASE_URL="postgres://avnadmin:AVNS_EeDiMIdW-dNT4Ox9l1n@pg-35339ab4-harkirat-d1b9.a.aivencloud.com:25579/defaultdb?sslmode=require" image_name  = -e used to pass env secret in docker while running



**List all contents of a container folder
docker exec <container_name_or_id> ls /path/to/directory

**Running an Interactive Shell
docker exec -it <container_name_or_id> /bin/bash



//layers ,network, volumes

1.layers = is just an cache it help us to built docker img faster and it make resources re-usable,re-sharable 




FROM node:20 -----layer-1

WORKDIR /app  -----layer-2

COPY . .     -----layer-3

RUN npm install  -----layer-4
RUN npx prisma generate  -----layer-5
RUN npm run build   -----layer-6



//volumes

1.volume = is used to store data even when dcoker container is stopped

docker volume create vol-1

docker run -v vol-1:/data/db -p 27017:27017 mongo

-v vol-1:/data/db


//network

1.network = to all other containers to same network to communicate


docker network create my_custom_network

docker run -d -p 3000:3000 --name backend --network my_custom_network image_tag

docker run -d -v volume_database:/data/db --name mongo --network my_custom_network -p 27017:27017 mongo
