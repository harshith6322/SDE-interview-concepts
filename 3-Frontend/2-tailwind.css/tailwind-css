# Tailwind CSS

## What is Tailwind CSS?

Tailwind CSS is a utility-first CSS framework packed with classes like `flex`, `pt-4`, `text-center`, and `rotate-90` that can be composed to build any design directly in your markup.

---

## Getting Started

### **Vite-React.js Setup**

```bash
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
```

### **React.js Setup**

```bash
npm install -D tailwindcss
npx tailwindcss init
```

In both cases, you will need to modify the Tailwind configuration file slightly.

---

## Customizing Tailwind

### **1. Arbitrary Values**

- You can write custom CSS values using brackets:
  - Example: `text-[20px]`, `text-[color]`, `tracking-[1rem]`

### **2. Directional Utilities**

- `t` for top, `r` for right, `b` for bottom, `l` for left.

### **3. Responsive Sizes**

- `xs`, `sm`, `base`, `lg`, `xl`, `2xl`, up to `9xl`.

### **4. Letter Spacing**

- Values: `tighter`, `tight`, `normal`, `wide`, `widest`.

### **5. Font Weights**

- Values: `thin`, `extralight`, `light`, `normal`, `medium`, `semibold`, `extrabold`.

### **6. Color Shades**

- Colors range from `50` to `950` for various shades.

---

## Text Styling

### **1. Text Colors (50 to 950)**

- Major colors: Slate, Gray, Stone (from white to black), Red, Orange, Amber, Yellow, Lime, Green, Sky, Blue, Indigo, Purple, Pink, Rose.
- For more colors: [Tailwind Customizing Colors](https://tailwindcss.com/docs/customizing-colors)

### **2. Font Size**

- Sizes range from `text-xs` to `text-9xl`.

### **3. Text Alignment**

- `text-left`, `text-right`, `text-center`, `text-justify`, `text-start`, `text-end`.

### **4. Text Transformations**

- Options: `uppercase`, `lowercase`, `capitalize`, `normal-case`.

### **5. Letter Spacing**

- Values: `tracking-tighter`, `tracking-tight`, `tracking-normal`, `tracking-wide`, `tracking-wider`, `tracking-widest`.

### **6. Font Weight**

- Examples: `font-thin`, `font-extralight`, `font-light`, `font-normal`, `font-medium`, `font-semibold`, `font-bold`, `font-extrabold`, `font-black`.

### **7. Font Families**

- `font-sans`: `ui-sans-serif, system-ui, sans-serif`
- `font-serif`: `ui-serif, Georgia, Cambria`
- `font-mono`: `ui-monospace, SFMono-Regular, Menlo, Monaco`

---

## Box Model

### **1. Margin**

- `m-0`, `mx-0`, `my-0`, `ml`, `mt`, `mr`, `mb`.

### **2. Padding**

- `p-0`, `px-0`, `py-0`, `pl`, `pt`, `pr`, `pb`.

### **3. Border**

- Use `border`, `border-x-2`, `border-t-2`, etc.
- Border radius: `rounded`, `rounded-md`, `rounded-lg`, `rounded-full`.
- Border top, right, bottom, left radius: `rounded-t-lg`, `rounded-r-lg`.

### **4. Space Between Elements**

- `space-x-*`, `space-y-*`.

### **5. Width**

- Ranges from `w-0`, `w-px`, `w-0.5`, up to `w-full`, `w-screen`.

### **6. Height**

- Ranges from `h-0`, `h-px`, `h-1/2` to `h-full`, `h-screen`.

### **7. Display**

- `block`, `inline-block`, `inline`, `flex`, `grid`, `inline-grid`, `hidden`.

---

## Responsive Design

Tailwind is a **mobile-first approach**, meaning all classes apply to smaller screen sizes by default.

Include this in your `index.html` to ensure full responsiveness:

```html
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
```

### **Breakpoint Prefixes**

| Prefix | Min Width | Media Query                  |
| ------ | --------- | ---------------------------- |
| `sm`   | 640px     | `@media (min-width: 640px)`  |
| `md`   | 768px     | `@media (min-width: 768px)`  |
| `lg`   | 1024px    | `@media (min-width: 1024px)` |
| `xl`   | 1280px    | `@media (min-width: 1280px)` |
| `2xl`  | 1536px    | `@media (min-width: 1536px)` |

### **Min/Max Width and Height**

- `min-w-0` to `min-w-96` (0px to 24rem).
- `min-w-full` sets the width to 100%.
- `max-w-0` to `max-w-96` (0px to 24rem).
- `max-w-full` sets the width to 100%.

---

## Layouts: Flex & Grid

### **Flexbox**

- **Display Flex**: `flex`, `inline-flex`.
- **Direction**: `flex-row`, `flex-col`.
- **Wrap**: `flex-wrap`, `nowrap`.
- **Justify Content**: `justify-start`, `justify-end`, `justify-center`.
- **Align Items**: `items-start`, `items-center`, `items-baseline`.
- **Flex Grow**: `flex-grow-0`, `flex-grow`.
- **Order**: `order-1`, `order-last`.

### **Grid**

- **Display Grid**: `grid`, `inline-grid`.
- **Columns**: `grid-cols-{n}`.
- **Rows**: `grid-rows-{n}`.
- **Gap**: `gap-x-*`, `gap-y-*`, `gap-*`.
- **Justify Items**: `justify-items-*`.
- **Align Items**: `items-*`.

---

## Positioning

- **Position**: `static`, `fixed`, `absolute`, `relative`, `sticky`.
- **Z-Index**: `z-0` to `z-50`, `z-auto`.
- **Inset**: `inset-0`, `top-0`, `right-0`, `bottom-0`, `left-0`.

---

## Overflow

- **Overflow**: `overflow-auto`, `overflow-hidden`, `overflow-visible`, `overflow-scroll`.
- **Overflow X/Y**: `overflow-x-*`, `overflow-y-*`.

---

## Pseudo-Classes & Visibility

### **1. Pseudo-Classes**

- Use modifiers like `hover`, `focus`, `first-child`, `required`.

### **2. Form States**

- `required`, `invalid`, `disabled`.

### **3. Visibility**

- `visible`, `invisible`, `collapse`.

### **4. Opacity**

- `opacity-*` utilities allow controlling an element’s transparency.

---

## Custom CSS with Tailwind

### **Using `@layer`**

- You can use `@layer` to add custom CSS styles in your project:

```css
@layer components {
  .my-custom-style {
    /* Custom rules */
  }
}
```

### **Using `@apply`**

- Tailwind allows you to apply multiple utilities in custom classes:

```css
.btn {
  @apply bg-blue-500 text-white font-bold py-2 px-4 rounded;
}
```

---

This markdown version of your notes makes it easier to read and follow!

### 1. **Backgrounds**

- `bg-none`: background-image: none;
- `bg-gradient-to-{t|tr|r|br|b|bl|l|tl}`: Apply gradient backgrounds to elements.
  - Example: `bg-gradient-to-r from-green-400 via-blue-500 to-purple-600`
- `bg-opacity-{value}`: Set background opacity (from 0 to 100).
- `bg-cover`, `bg-contain`: Control background size.
- `bg-fixed`, `bg-local`, `bg-scroll`: Set background attachment.
- `bg-center`, `bg-top`, `bg-bottom`, `bg-left`, `bg-right`: Control background position.

### 2. **Animations**

- Tailwind provides a set of built-in animations using utilities like `animate-spin`, `animate-ping`, `animate-pulse`, `animate-bounce`.
- Example: `animate-spin` will rotate an element indefinitely.
- You can also create custom animations using `@keyframes` in the `@layer` directive in your CSS.

### 3. **Transitions**

- `transition-all`, `transition-colors`, `transition-opacity`, `transition-shadow`, etc., are used to apply smooth transitions between states.
- `duration-{number}`: Control the duration of the transition.
  - Example: `duration-300` for a 300ms transition.
- `ease-linear`, `ease-in`, `ease-out`, `ease-in-out`: Apply different timing functions to transitions.

### 4. **Transforms**

- `transform`: Enables transforms (rotate, scale, etc.).
- `scale-{value}`: Scale elements (value ranges from 0 to 100+).
- `rotate-{angle}`: Rotate elements by a specific angle (e.g., `rotate-45`).
- `skew-x-{angle}`, `skew-y-{angle}`: Skew elements on the x- or y-axis.
- `translate-x-{size}`, `translate-y-{size}`: Move elements along the x- or y-axis.

### 5. **Aspect Ratio**

- `aspect-auto`: The element’s width and height are determined by its content.
- `aspect-{ratio}`: Set a specific aspect ratio, such as `aspect-w-16 aspect-h-9` for a 16:9 ratio.
- Example: `aspect-w-4 aspect-h-3` for a 4:3 aspect ratio.

### 6. **Typography Extensions**

- `leading-{size}`: Controls line-height (e.g., `leading-tight`, `leading-loose`).
- `list-disc`, `list-decimal`: Styles for lists.
- `list-inside`, `list-outside`: Control whether the list item markers should appear inside or outside.

### 7. **Shadows**

- `shadow-sm`, `shadow-md`, `shadow-lg`, `shadow-xl`, `shadow-2xl`: Predefined box-shadow utilities.
- `shadow-inner`: Applies shadow inside an element.
- `shadow-none`: Removes any shadow.
- You can customize shadows via the `box-shadow` utility in the `tailwind.config.js`.

### 8. **Gradients and Masks**

- Use gradients to enhance designs, such as `bg-gradient-to-r from-pink-500 to-yellow-500`.
- Masking utilities like `mask-image` and `mask-position` can help with complex layouts.

### 9. **Blend Modes**

- `mix-blend-{mode}`: Control how an element blends with its background (e.g., `mix-blend-multiply`, `mix-blend-screen`).
- `bg-blend-{mode}`: Control how background images blend (e.g., `bg-blend-darken`, `bg-blend-lighten`).

### 10. **Filters**

- Tailwind provides built-in filter utilities such as:
  - `blur-sm`, `blur-lg`: Apply blur filters.
  - `brightness-{value}`: Control brightness (from 0 to 200).
  - `grayscale`, `sepia`, `invert`, `saturate-{value}`: Apply additional filters to images or elements.

### 11. **Dark Mode**

- You can add dark mode support by enabling it in the config:
  ```js
  module.exports = {
    darkMode: "media", // or 'class'
  };
  ```
- `dark:bg-black`, `dark:text-white`: Dark mode styles using the `dark:` prefix.
- You can also manually toggle dark mode by adding or removing a `dark` class to the `html` element.

### 12. **Accessibility (a11y)**

- `sr-only`: Screen reader-only elements.
- `not-sr-only`: Reverts `sr-only` to make elements visible again.
- Use `focus:outline-none`, `focus:ring` to style elements when they receive focus.

These concepts will help you further enhance your Tailwind CSS projects, especially when working on more complex UIs.
