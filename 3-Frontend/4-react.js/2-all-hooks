Here are **real-world examples** for each important React hook:

### 1. **useState** - **Real-world Example: Login Form**

In a login form, `useState` can track the values entered into username and password fields.

```javascript
const LoginForm = () => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log({ username, password });
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        value={username}
        onChange={(e) => setUsername(e.target.value)}
        placeholder="Username"
      />
      <input
        type="password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        placeholder="Password"
      />
      <button type="submit">Login</button>
    </form>
  );
};
```

### 2. **useEffect** - **Real-world Example: Fetching Data from an API**

When fetching user data from an API, `useEffect` can handle the side effect of making HTTP requests when the component mounts.

```javascript
const UserProfile = ({ userId }) => {
  const [userData, setUserData] = useState(null);

  useEffect(() => {
    fetch(`https://api.example.com/users/${userId}`)
      .then((response) => response.json())
      .then((data) => setUserData(data));
  }, [userId]);

  return userData ? <div>{userData.name}</div> : <div>Loading...</div>;
};
```

7[x,y,z] dependence array var-state if changes it causes re-render of comp and useEffect

- [x,y,z]dependence array var-state useEffect run on on-muont and when ever the x,y,z changes useeffect ,comp re-renders

\*[]empty dependence array useeffect run only on-mount

\*no dependence array run useEffect on every render ---bad code

### 3. **useContext** - **Real-world Example: Global Theme Management**

When managing a global theme (e.g., dark mode), `useContext` helps access the theme value without passing props down multiple levels.

```javascript
const ThemeContext = React.createContext();

const App = () => {
  const [theme, setTheme] = useState("light");

  return (
    <ThemeContext.Provider value={theme}>
      <Header />
      <button onClick={() => setTheme(theme === "light" ? "dark" : "light")}>
        Toggle Theme
      </button>
    </ThemeContext.Provider>
  );
};

const Header = () => {
  const theme = useContext(ThemeContext);
  return <h1>Current Theme: {theme}</h1>;
};
```

### 4. **useReducer** - **Real-world Example: Complex Form State**

In complex forms like checkout forms, `useReducer` helps manage the state transitions for different form fields.

```javascript
const formReducer = (state, action) => {
  switch (action.type) {
    case "SET_NAME":
      return { ...state, name: action.payload };
    case "SET_EMAIL":
      return { ...state, email: action.payload };
    case "SET_ADDRESS":
      return { ...state, address: action.payload };
    default:
      return state;
  }
};

const CheckoutForm = () => {
  const [formState, dispatch] = useReducer(formReducer, {
    name: "",
    email: "",
    address: "",
  });

  return (
    <form>
      <input
        type="text"
        placeholder="Name"
        value={formState.name}
        onChange={(e) =>
          dispatch({ type: "SET_NAME", payload: e.target.value })
        }
      />
      <input
        type="email"
        placeholder="Email"
        value={formState.email}
        onChange={(e) =>
          dispatch({ type: "SET_EMAIL", payload: e.target.value })
        }
      />
      <input
        type="text"
        placeholder="Address"
        value={formState.address}
        onChange={(e) =>
          dispatch({ type: "SET_ADDRESS", payload: e.target.value })
        }
      />
      <button type="submit">Submit</button>
    </form>
  );
};
```

### 5. **useRef** - **Real-world Example: Focusing on an Input Field**

Automatically focusing on an input field when the component mounts.

```javascript
const FocusInput = () => {
  const inputRef = useRef(null);

  useEffect(() => {
    inputRef.current.focus();
  }, []);

  return <input ref={inputRef} placeholder="Focus on me!" />;
};
```

### 6. **useMemo** - **Real-world Example: Expensive Computation**

Memoize the result of an expensive operation (e.g., a large list filter) to avoid recalculating on every render.

```javascript
const ProductList = ({ products }) => {
  const [filter, setFilter] = useState("");

  const filteredProducts = useMemo(() => {
    return products.filter((product) => product.name.includes(filter));
  }, [filter, products]);

  return (
    <>
      <input
        type="text"
        value={filter}
        onChange={(e) => setFilter(e.target.value)}
        placeholder="Search products"
      />
      <ul>
        {filteredProducts.map((product) => (
          <li key={product.id}>{product.name}</li>
        ))}
      </ul>
    </>
  );
};
```

### 7. **useCallback** - **Real-world Example: Optimizing Event Handlers in Child Components**

Use `useCallback` to avoid unnecessary re-creations of event handler functions, which can cause performance issues.

```javascript
const Button = React.memo(({ onClick }) => {
  console.log("Button rendered");
  return <button onClick={onClick}>Click me</button>;
});

const App = () => {
  const [count, setCount] = useState(0);

  const handleClick = useCallback(() => {
    setCount((prevCount) => prevCount + 1);
  }, []);

  return (
    <div>
      <p>{count}</p>
      <Button onClick={handleClick} />
    </div>
  );
};
```

### 8. **useLayoutEffect** - **Real-world Example: Measuring DOM Elements**

Use `useLayoutEffect` when you need to measure DOM elements before the browser paints.

```javascript
const MeasureDiv = () => {
  const divRef = useRef(null);
  const [rect, setRect] = useState({});

  useLayoutEffect(() => {
    const { width, height } = divRef.current.getBoundingClientRect();
    setRect({ width, height });
  }, []);

  return (
    <>
      <div
        ref={divRef}
        style={{ width: 200, height: 200, background: "lightblue" }}
      >
        Measure me!
      </div>
      <p>
        Width: {rect.width}, Height: {rect.height}
      </p>
    </>
  );
};
```

### 9. **useImperativeHandle** - **Real-world Example: Customizing Input Focus from Parent**

Customizing how a parent interacts with a child component using a `ref`.

```javascript
const FancyInput = React.forwardRef((props, ref) => {
  const inputRef = useRef(null);

  useImperativeHandle(ref, () => ({
    focus: () => {
      inputRef.current.focus();
    },
  }));

  return <input ref={inputRef} />;
});

const App = () => {
  const inputRef = useRef(null);

  return (
    <>
      <FancyInput ref={inputRef} />
      <button onClick={() => inputRef.current.focus()}>Focus the input</button>
    </>
  );
};
```

### 10. **useDebugValue** - **Real-world Example: Custom Hook Debugging**

Displaying a value in React DevTools when using custom hooks.

```javascript
const useOnlineStatus = () => {
  const [isOnline, setIsOnline] = useState(navigator.onLine);

  useDebugValue(isOnline ? "Online" : "Offline");

  useEffect(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);

    window.addEventListener("online", handleOnline);
    window.addEventListener("offline", handleOffline);

    return () => {
      window.removeEventListener("online", handleOnline);
      window.removeEventListener("offline", handleOffline);
    };
  }, []);

  return isOnline;
};

const Status = () => {
  const isOnline = useOnlineStatus();
  return <div>{isOnline ? "Online" : "Offline"}</div>;
};
```

These real-world examples show how React hooks can be applied in practical situations like forms, data fetching, performance optimizations, and managing global states.
